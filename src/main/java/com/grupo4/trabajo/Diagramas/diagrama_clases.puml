@startuml
'https://plantuml.com/class-diagram


class Cliente{
-direccion: String
-deuda: float
-tiposervicio: Servicio
-DiasUltLimpieza: int

+Cliente(Servicio)
+pedirPedido(pedido: Pedido)
+setters()
+getters()
}

class Empresa{
-instancia: Empresa
-informe: Informe
-Collection<Robot> robots
-Collection<Cliente> clientes
-Collection<Empleado> empleados

-Empresa()
+getInstancia()
}

class Informe{
    -ajusteComunDefinido: float
    -cantPedidosSimples: int
    -cantPedidosComplejos: int

    +calcularCostoPedido(pedido)
    +calcularCostoCliente(cliente)
}

Informe *-- Estrategia

interface Estrategia {
    +calcularCosto(Pedido pedido, List<Robot> robotList, Empleado empleado) : float
}
Estrategia <|.down. TarejaCompleja
class TarejaCompleja {

}

Estrategia <|.down. TareaSimple
class TareaSimple {

}

abstract class Servicio{
- pedidoValidator: PedidoValidator
- robotsService: robotsService
- actualizadorServicio: ActualizadorServicio
- cantLimpiezas: int
- cantOrdenamientos: int
- limiteDeuda: float
-cuota: float

+realizarPedido(pedido: Pedido,cliente: Cliente)
+setters()
+getters()
}

abstract class Robot{
- pedidosPendientes: Collection<PedidoLimpieza>
- idRobot: String
- superficie: SuperficieEnum
- puedeOrdenar: boolean
- puedeLustrar: boolean
- costo: float

+agregarPedido()
+finalizarPedido()
}

class K311Y_fl{
 superficie = PISOS
 puedeOrdenar = false
 puedeLustrar = false
 costo = 1000
}
class K311Y_fu{
superficie = MUEBLES
 puedeOrdenar = false
 puedeLustrar = true
 costo = 500
}
class P011H{
superficie = PISOS
 puedeOrdenar = false
 puedeLustrar = true
 costo = 1500
}
class K311Y_a{
 superficie = PISOSYMUEBLES
 puedeOrdenar = true
 puedeLustrar = true
 costo = 5000
}
class S031RTY{
superficie = null
 puedeOrdenar = true
 puedeLustrar = false
 costo = 2700
}

class ActualizadorServicio{
+actualizarServicio(pedido: Pedido,Servicio servicio+)
}

class Platinium{
limiteDeuda = cuota
cantLimpiezas = INFINITE
cantOrdenamientos = INFINITE
}
class Classic{
limiteDeuda = 2000
cantOrdenamientos = 3
cantLimpiezas = INFINITE
}

class Economic{
limiteDeuda = 0
cantLimpiezas = 3
cantOrdenamientos = 0
}

class RobotCreator{
    +crearRobot(modeloRobot: Robot, cantPedidos : int): Robot
}


class RobotsService{
    -buscadorRobots: BuscadorRobots
    +asignarPedidoRobots(Collection<Robot> robots)
    +getCostoRobots(Collection<Robot> robots)
}

interface BuscadorRobots{
+buscarRobots(pedido,robots) : Collection<Robot>
}

class BuscadorRobotsEconomic{

}

class BuscadorRobotsPlatinium{
}

class Pedido{
-pedidoLimpieza: PedidoLimpieza
-pedidoReparacion: pedidoReparacion
+Pedido(pedidoLimpieza:PedidoLimpieza, pedidoReparacion: PedidoReparacion)
+solicitaLimpieza(): boolean
+solicitaReparacion(): boolean
}

class PedidoLimpieza{
- limpieza: Superficie
- limpiezaSimple: boolean
- ordenamiento: Superficie
- lustramiento: Superficie
- cantMascotas: int

+requiereLimpieza(): boolean
+requiereOrdenamiento(): boolean
+requiereLustramiento(): boolean
}

class PedidoReparacion{
    -tipoReparacion: TipoReparacion
    -complejidad: int
}

class Empleado{
    -sueldo: float
    -especialidad: TipoReparacion
}

enum TipoReparacion{
GAS
ELECTRICIDAD
}

abstract class CalculadorReparacion{
+static CalcularCosto(PedidoReparacion : pedidoReparacion) : float
}

enum SuperficieEnum{
PISOS
MUEBLES
PISOSYMUEBLES
}

enum EnumResiduo{
BARRO
POLVO
}

class Superficie{
- superficie: SuperficieEnum
- residuo: EnumResiduo
}

Robot <|-- K311Y_fl
Robot <|-- K311Y_fu
Robot <|-- P011H
Robot <|-- K311Y_a
Robot <|-- S031RTY

Servicio <|-- Platinium
Servicio <|-- Classic
Servicio <|-- Economic

interface PedidoValidator{
+validarPedido(pedido: Pedido,cliente: Cliente)
}

Robot <-- Servicio : Uso
PedidoValidator -left-* Servicio
ActualizadorServicio -left-* Servicio
RobotsService -left-* Servicio
Pedido <--  Cliente : Uso

RobotCreator --> Robot
RobotsService *-up- BuscadorRobots
BuscadorRobots <|-up- BuscadorRobotsEconomic
BuscadorRobots <|-up- BuscadorRobotsPlatinium

Cliente <-up- Empresa  : Uso

Robot <-up-  Empresa : Uso

Cliente *--  Servicio : composiciÃ³n
Superficie *-- EnumResiduo

Superficie *-left- SuperficieEnum
Robot *-right- SuperficieEnum
Pedido *-left- Superficie

Empresa *-right- Informe

Pedido *-up- PedidoLimpieza
Pedido *-up- PedidoReparacion
PedidoReparacion *-up- TipoReparacion
Empleado *-right- TipoReparacion
Empresa *-up- Empleado

CalculadorReparacion --> PedidoReparacion
note bottom of Classic : definimos los limites de cada tipo de servicio\n para mas legibilidad
note bottom of P011H : definimos los limites de cada tipo de robot\n para mas legibilidad
note right of Cliente : las funciones "setters" y "getters" \n hacen referencia a los get y set de cada variable de la clase\n se hara referencia a esto en cada clase con atributos
note bottom of PedidoValidator
diagrama de funcionamiento
de pedidoValidator
en diagrama_clases_pedidoValidator
end note
@enduml